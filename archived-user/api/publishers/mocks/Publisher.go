// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	memberships "github.com/devpies/devpie-client-core/users/domain/memberships"
	events "github.com/devpies/devpie-client-events/go/events"

	mock "github.com/stretchr/testify/mock"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// MembershipCreated provides a mock function with given fields: nats, m, uid
func (_m *Publisher) MembershipCreated(nats *events.Client, m memberships.Membership, uid string) error {
	ret := _m.Called(nats, m, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.Client, memberships.Membership, string) error); ok {
		r0 = rf(nats, m, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MembershipCreatedForProject provides a mock function with given fields: nats, m, pid, uid
func (_m *Publisher) MembershipCreatedForProject(nats *events.Client, m memberships.Membership, pid string, uid string) error {
	ret := _m.Called(nats, m, pid, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.Client, memberships.Membership, string, string) error); ok {
		r0 = rf(nats, m, pid, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MembershipDeleted provides a mock function with given fields: nats, mid, uid
func (_m *Publisher) MembershipDeleted(nats *events.Client, mid string, uid string) error {
	ret := _m.Called(nats, mid, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.Client, string, string) error); ok {
		r0 = rf(nats, mid, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectUpdated provides a mock function with given fields: nats, tid, pid, uid
func (_m *Publisher) ProjectUpdated(nats *events.Client, tid *string, pid string, uid string) error {
	ret := _m.Called(nats, tid, pid, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.Client, *string, string, string) error); ok {
		r0 = rf(nats, tid, pid, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
