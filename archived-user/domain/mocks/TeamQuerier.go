// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/devpies/devpie-client-core/users/platform/database"
	mock "github.com/stretchr/testify/mock"

	teams "github.com/devpies/devpie-client-core/users/domain/teams"

	time "time"
)

// TeamQuerier is an autogenerated mock type for the TeamQuerier type
type TeamQuerier struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, repo, nt, uid, now
func (_m *TeamQuerier) Create(ctx context.Context, repo database.Storer, nt teams.NewTeam, uid string, now time.Time) (teams.Team, error) {
	ret := _m.Called(ctx, repo, nt, uid, now)

	var r0 teams.Team
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, teams.NewTeam, string, time.Time) teams.Team); ok {
		r0 = rf(ctx, repo, nt, uid, now)
	} else {
		r0 = ret.Get(0).(teams.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, teams.NewTeam, string, time.Time) error); ok {
		r1 = rf(ctx, repo, nt, uid, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, repo, uid
func (_m *TeamQuerier) List(ctx context.Context, repo database.Storer, uid string) ([]teams.Team, error) {
	ret := _m.Called(ctx, repo, uid)

	var r0 []teams.Team
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string) []teams.Team); ok {
		r0 = rf(ctx, repo, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]teams.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, string) error); ok {
		r1 = rf(ctx, repo, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: ctx, repo, tid
func (_m *TeamQuerier) Retrieve(ctx context.Context, repo database.Storer, tid string) (teams.Team, error) {
	ret := _m.Called(ctx, repo, tid)

	var r0 teams.Team
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string) teams.Team); ok {
		r0 = rf(ctx, repo, tid)
	} else {
		r0 = ret.Get(0).(teams.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, string) error); ok {
		r1 = rf(ctx, repo, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
