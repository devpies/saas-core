// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	invites "github.com/devpies/devpie-client-core/users/domain/invites"
	database "github.com/devpies/devpie-client-core/users/platform/database"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// InviteQuerier is an autogenerated mock type for the InviteQuerier type
type InviteQuerier struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, repo, ni, now
func (_m *InviteQuerier) Create(ctx context.Context, repo database.Storer, ni invites.NewInvite, now time.Time) (invites.Invite, error) {
	ret := _m.Called(ctx, repo, ni, now)

	var r0 invites.Invite
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, invites.NewInvite, time.Time) invites.Invite); ok {
		r0 = rf(ctx, repo, ni, now)
	} else {
		r0 = ret.Get(0).(invites.Invite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, invites.NewInvite, time.Time) error); ok {
		r1 = rf(ctx, repo, ni, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveInvite provides a mock function with given fields: ctx, repo, uid, iid
func (_m *InviteQuerier) RetrieveInvite(ctx context.Context, repo database.Storer, uid string, iid string) (invites.Invite, error) {
	ret := _m.Called(ctx, repo, uid, iid)

	var r0 invites.Invite
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string, string) invites.Invite); ok {
		r0 = rf(ctx, repo, uid, iid)
	} else {
		r0 = ret.Get(0).(invites.Invite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, string, string) error); ok {
		r1 = rf(ctx, repo, uid, iid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveInvites provides a mock function with given fields: ctx, repo, uid
func (_m *InviteQuerier) RetrieveInvites(ctx context.Context, repo database.Storer, uid string) ([]invites.Invite, error) {
	ret := _m.Called(ctx, repo, uid)

	var r0 []invites.Invite
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string) []invites.Invite); ok {
		r0 = rf(ctx, repo, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invites.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, string) error); ok {
		r1 = rf(ctx, repo, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, repo, update, uid, iid, now
func (_m *InviteQuerier) Update(ctx context.Context, repo database.Storer, update invites.UpdateInvite, uid string, iid string, now time.Time) (invites.Invite, error) {
	ret := _m.Called(ctx, repo, update, uid, iid, now)

	var r0 invites.Invite
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, invites.UpdateInvite, string, string, time.Time) invites.Invite); ok {
		r0 = rf(ctx, repo, update, uid, iid, now)
	} else {
		r0 = ret.Get(0).(invites.Invite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, invites.UpdateInvite, string, string, time.Time) error); ok {
		r1 = rf(ctx, repo, update, uid, iid, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
