// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/devpies/devpie-client-core/users/platform/database"
	mock "github.com/stretchr/testify/mock"

	time "time"

	users "github.com/devpies/devpie-client-core/users/domain/users"
)

// UserQuerier is an autogenerated mock type for the UserQuerier type
type UserQuerier struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, repo, nu, now
func (_m *UserQuerier) Create(ctx context.Context, repo database.Storer, nu users.NewUser, now time.Time) (users.User, error) {
	ret := _m.Called(ctx, repo, nu, now)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, users.NewUser, time.Time) users.User); ok {
		r0 = rf(ctx, repo, nu, now)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, users.NewUser, time.Time) error); ok {
		r1 = rf(ctx, repo, nu, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByEmail provides a mock function with given fields: repo, email
func (_m *UserQuerier) RetrieveByEmail(repo database.Storer, email string) (users.User, error) {
	ret := _m.Called(repo, email)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(database.Storer, string) users.User); ok {
		r0 = rf(repo, email)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.Storer, string) error); ok {
		r1 = rf(repo, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveMe provides a mock function with given fields: ctx, repo, uid
func (_m *UserQuerier) RetrieveMe(ctx context.Context, repo database.Storer, uid string) (users.User, error) {
	ret := _m.Called(ctx, repo, uid)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string) users.User); ok {
		r0 = rf(ctx, repo, uid)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, string) error); ok {
		r1 = rf(ctx, repo, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveMeByAuthID provides a mock function with given fields: ctx, repo, aid
func (_m *UserQuerier) RetrieveMeByAuthID(ctx context.Context, repo database.Storer, aid string) (users.User, error) {
	ret := _m.Called(ctx, repo, aid)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string) users.User); ok {
		r0 = rf(ctx, repo, aid)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, string) error); ok {
		r1 = rf(ctx, repo, aid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
