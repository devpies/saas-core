// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/devpies/devpie-client-core/users/platform/database"
	mock "github.com/stretchr/testify/mock"

	projects "github.com/devpies/devpie-client-core/users/domain/projects"
)

// ProjectQuerier is an autogenerated mock type for the ProjectQuerier type
type ProjectQuerier struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, repo, p
func (_m *ProjectQuerier) Create(ctx context.Context, repo *database.Repository, p projects.ProjectCopy) error {
	ret := _m.Called(ctx, repo, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Repository, projects.ProjectCopy) error); ok {
		r0 = rf(ctx, repo, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, repo, pid
func (_m *ProjectQuerier) Delete(ctx context.Context, repo database.Storer, pid string) error {
	ret := _m.Called(ctx, repo, pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string) error); ok {
		r0 = rf(ctx, repo, pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Retrieve provides a mock function with given fields: ctx, repo, pid
func (_m *ProjectQuerier) Retrieve(ctx context.Context, repo database.Storer, pid string) (projects.ProjectCopy, error) {
	ret := _m.Called(ctx, repo, pid)

	var r0 projects.ProjectCopy
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string) projects.ProjectCopy); ok {
		r0 = rf(ctx, repo, pid)
	} else {
		r0 = ret.Get(0).(projects.ProjectCopy)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Storer, string) error); ok {
		r1 = rf(ctx, repo, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, repo, pid, update
func (_m *ProjectQuerier) Update(ctx context.Context, repo database.Storer, pid string, update projects.UpdateProjectCopy) error {
	ret := _m.Called(ctx, repo, pid, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Storer, string, projects.UpdateProjectCopy) error); ok {
		r0 = rf(ctx, repo, pid, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
