// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	cognitoidentityprovider "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"

	mock "github.com/stretchr/testify/mock"
)

// CognitoClient is an autogenerated mock type for the cognitoClient type
type CognitoClient struct {
	mock.Mock
}

// AdminCreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *CognitoClient) AdminCreateUser(ctx context.Context, params *cognitoidentityprovider.AdminCreateUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminCreateUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminCreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminCreateUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewCognitoClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCognitoClient creates a new instance of CognitoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCognitoClient(t NewCognitoClientT) *CognitoClient {
	mock := &CognitoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
