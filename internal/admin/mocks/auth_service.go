// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	cognitoidentityprovider "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the authService type
type AuthService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, email, password
func (_m *AuthService) Authenticate(ctx context.Context, email string, password string) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *cognitoidentityprovider.AdminInitiateAuthOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *cognitoidentityprovider.AdminInitiateAuthOutput); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminInitiateAuthOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePasswordChallengeSession provides a mock function with given fields: ctx
func (_m *AuthService) CreatePasswordChallengeSession(ctx context.Context) {
	_m.Called(ctx)
}

// CreateUserSession provides a mock function with given fields: ctx, token
func (_m *AuthService) CreateUserSession(ctx context.Context, token []byte) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RespondToNewPasswordRequiredChallenge provides a mock function with given fields: ctx, email, password, session
func (_m *AuthService) RespondToNewPasswordRequiredChallenge(ctx context.Context, email string, password string, session string) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	ret := _m.Called(ctx, email, password, session)

	var r0 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *cognitoidentityprovider.AdminRespondToAuthChallengeOutput); ok {
		r0 = rf(ctx, email, password, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, email, password, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewAuthServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t NewAuthServiceT) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
