// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	render "github.com/devpies/core/internal/admin/render"
	mock "github.com/stretchr/testify/mock"
)

// Renderer is an autogenerated mock type for the renderer type
type Renderer struct {
	mock.Mock
}

// Template provides a mock function with given fields: w, r, page, td, partials
func (_m *Renderer) Template(w http.ResponseWriter, r *http.Request, page string, td *render.TemplateData, partials ...string) error {
	_va := make([]interface{}, len(partials))
	for _i := range partials {
		_va[_i] = partials[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, w, r, page, td)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, string, *render.TemplateData, ...string) error); ok {
		r0 = rf(w, r, page, td, partials...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewRendererT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRenderer creates a new instance of Renderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRenderer(t NewRendererT) *Renderer {
	mock := &Renderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
